617. 合并二叉树
给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。

你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。

示例 1:

输入:
    Tree 1                     Tree 2
          1                         2
         / \                       / \
        3   2                     1   3
       /                           \   \
      5                             4   7
输出:
合并后的树:
         3
        / \
       4   5
      / \   \
     5   4   7
注意: 合并必须从两个树的根节点开始。



来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/merge-two-binary-trees
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:
        #递归终止条件：但凡有一个节点为空，就立刻返回另外一个，如果另外一个也为none，则直接返回none
        if not root1:
            return root2
        if not root2:
            return root1
        #上面的递归终止条件保证了代码执行到这里，root1 root2都非空
        root1.val+=root2.val#中
        root1.left=self.mergeTrees(root1.left,root2.left)#左
        root1.right=self.mergeTrees(root1.right,root2.right)#右
        return root1
